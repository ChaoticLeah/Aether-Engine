{
  "pages": [
    {
      "Name": "Home",
      "Tags": [],
      "Text": [
        {
          "type": "paragraph",
          "value": "Welcome to the Home page. "
        }
      ]
    },
    {
      "Name": "Scripting Basics",
      "Tags": [],
      "Text": [
        {
          "type": "paragraph",
          "value": "Scripting in this language is almost the same as writing a vanilla javascript class. \n Here is an example of a basic script:"
        },
        {
          "type": "script",
          "value": "basics/startCode.js"
        },
        {
          "type": "paragraph",
          "value": "onStart only runs when the script first runs. update runs every frame.\n"
        },
        {
          "type": "title",
          "value": "Modifying and accessing the properties of an object:"
        },
        {
          "type": "paragraph",
          "value": "If you have an object instance (documentation on how to do this can be found<a href=\"./GettingObjects.html\">Here</a>) and you want to access or modify its properties (x, y, width, height, name, if it's enabled, rotation, etc ). The update and onStart method both pass in a parent variable. With this, you have access to the object that this instance of the script is applied. In this simple example below applying this to an object will make the parent object slowly move to the right."
        },
        {
          "type": "script",
          "value": "basics/moveToRightBasic.js"
        },
        {
          "type": "title",
          "value": "Varibles:"
        },
        {
          "type": "paragraph",
          "value": "Variables that are a member of that script must be referenced using <codeSnippet>this.variableName</codeSnippet>, just calling variableName will cause errors."
        },
        {
          "type": "script",
          "value": "basics/varibleDemo.js"
        },
        {
          "type": "paragraph",
          "value": "The same applies to functions as seen below."
        },
        {
          "type": "script",
          "value": "basics/funcDemo.js"
        },
        {
          "type": "title",
          "value": "Getting Components:"
        },
        {
          "type": "paragraph",
          "value": "You can get components of an object with the <codeSnippet>getComponent(str)</codeSnippet> method. This will return an array of components relevant to the type you asked for. <codeSnippet>parent.getComponent(\"Script Component\")</codeSnippet> would return an array of all the scripts on the parent object. If you want to get all the components you can just use <codeSnippet>parent.components</codeSnippet>, this is an array of all the object's components. An example of this can be seen below:"
        },
        {
          "type": "script",
          "value": "basics/getComponents.js"
        },
        {
          "type": "paragraph",
          "value": "you can also get the first component with <codeSnippet>getFirstComponent(str)</codeSnippet>. This either returns the component or undefined if there is no component of that type."
        },
        {
          "type": "title",
          "value": "Fun Little Project With all the stuff we learned:"
        },
        {
          "type": "script-preview",
          "value": {
            "script": "basics/rainbowCube.js",
            "result": "../code/codeSnippets/basics/rainbowCube.html"
          }
        },

        {
          "type": "title",
          "value": "A list of all the names of objects:"
        },
        {
          "type": "paragraph",
          "value": "<codeSnippet>parent.getComponent(\"Rectangle Component\")</codeSnippet> - This returns all the Rectangle Components.\n <codeSnippet>parent.getComponent(\"Script Component\")</codeSnippet> - This returns all the Script Components.\n <codeSnippet>parent.getComponent(\"Image Component\")</codeSnippet> - This returns all the Image Components.\n"
        }
      ]
    },
    {
      "Name": "Controller Support",
      "Tags": [],
      "Text": [
        {
          "type": "paragraph",
          "value": "This page will teach you how to use the Controller API."
        },
        {
          "type": "title",
          "value": "The Basics"
        },
        {
          "type": "paragraph",
          "value": "Before you do anything with a controller, you need to first check if any are available. <codeSnippet>if(!!gamepads[0]){/*Code Here*/}</codeSnippet> what this does is basically it checks to see if there is a controller plugged in. Usually, the user will have to connect the controller and press some button on it for it to detect that it is connected. This code is checking if controller 0 is connected, but the same applies to more controllers. To see how many controllers there are you can use <codeSnippet>gamepads.length</codeSnippet> There is also a tool under Tools in the game engine that lets you test your controller and even copy some starter code if you click on the button/joystick you want the code for."
        },
        {
          "type": "title",
          "value": "Getting the Joystick Info"
        },
        {
          "type": "paragraph",
          "value": "If you want to get the info of a joystick, first you should check that the controller has a joystick with <codeSnippet>if(gamepads[0].totalJoysticks > 0){/*Code Here*/}</codeSnippet> Keep in mind that if it has a joystick but you want to access the 2nd joystick and it does not have 2 it will still cause errors. The code for getting joystick positioning is shown below:"
        },

        {
          "type": "script",
          "value": "controller/basicjoycon.js"
        },
        {
          "type": "title",
          "value": "Getting the controller button press Info"
        },
        {
          "type": "paragraph",
          "value": "If you want to check if a button is pressed you can do it with <codeSnippet>gamepads[0].getButton(0)</codeSnippet> (Returns a value between 0 - 1), Keep in mind you still need to check if the button exists. If you want to know what buttons are at what ID, I recommend using the built-in tool under the tools tab in the game engine. Pressing a button will tell you at what index the button is at. Some buttons have pressure sensitivity so they just like any other button can return a value from 0 - 1 but it can be in the decimals."
        },

        {
          "type": "script",
          "value": "controller/basicbuttons.js"
        },
        {
          "type": "title",
          "value": "Vibration"
        },
        {
          "type": "paragraph",
          "value": "Vibration is not super widely supported, but it seems to work in both Chrome and Edge. If you want to make the controller vibrate we should first have to check if it can since not all controllers have the hardware to vibrate. This is not required since telling it to vibrate will just do nothing if it can but it's a good practice. Once we check if it can vibrate then we can run <codeSnippet>gamepads[0].vibrate(vibration strength from 0 to 1, vibration time in milliseconds);</codeSnippet> Here we can see that it will vibrate when we press button 0."
        },
        {
          "type": "script",
          "value": "controller/vibe.js"
        },
        {
          "type": "title",
          "value": "Extra Info"
        },
        {
          "type": "paragraph",
          "value": " Some extra data about the controller can be accessed with the code below:\n <codeSnippet>gamepads[0].id</codeSnippet> - Returns the readable id of the controller (eg. Xbox 360 Controller (XInput STANDARD GAMEPAD)) \n<codeSnippet>gamepads[0].mapping</codeSnippet> - Returns the mapping. You probably want to check this and make sure the mapping is \"standard\", otherwise some weird stuff may happen."
        },
        {
          "type": "title",
          "value": "A Simple Movement System:"
        },
        {
          "type": "script",
          "value": "controller/movement.js"
        }
      ]
    }
  ]
}
